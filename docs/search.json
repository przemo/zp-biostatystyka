[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ZP:BIO",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2\n\nx = 3\n\nprint(x)\n\n[1] 3"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Programowanie w języku R",
    "section": "",
    "text": "R to program statystyczny i jednocześnie język programowania wykorzystywany do przetwarzania danych oraz przeprowadzania analiz statystycznych. R jest dostępny nieodpłatnie ze strony https://cran.r-project.org. Sam program to nie wszystko. Sukces R i jego rosnąca popularność, nie tylko w środowisku naukowym, nie byłaby możliwa dzięki rzeszy entuzjastów tworzących dodatkowe pakiety rozszerzające jego funkcjonalność. W środowisku użytkowników R pakiety te nazywane są często bibliotekami (ang. libraries). Tutaj dowiesz się, które biblioteki są obecnie popularne w przeprowadzaniu analizy, które ułatwiają tworzenie tabel oraz raportów i mają praktyczne zastosowanie w dziedzinie zdrowia publicznego lub epidemiologii. R nie posiada rozbudowanego graficznego interfejsu jaki możemy spotkać w pakietach Statistica, SPSS, czy SAS Enterprise Guide. Praca w R opiera się głównie na wpisywaniu sekwencji poleceń bezpośrednio w konsoli R lub zapisaniu ich w pliku tekstowym, który następnie jest odczytywany i wykonywany. To jest często bariera, która może odstraszyć początkujących użytkowników i jest mniej przyjazna jak interfejs, gdzie przy pomocy kliknięcia myszką można wykonać operacje na danych lub przeprowadzić analizę statystyczną. Nic bowiem bardziej mylnego. Plik tekstowy z sekwencją poleceń (program) wydawanych R podczas analizy jest poniekąd rodzajem dziennika, gdzie możemy w łatwy sposób zapisać wszystkie kroki naszej analizy. Prześledzić wszystkie etapy manipulacji danych i ewentualnie odnaleźć błędy. Ponadto, zachowany program można wykonać wielokrotnie w przypadku zmiany danych źródłowych i uniknąć problemu powtarzania wszystkich sekwencji klikania i wybierania pozycji w menu interfejsu graficznego. Gdy dane źródłowe zmienią się, wystarczy wywołać program jeszcze raz i odczytać nowe wyniki analizy.\nOczywiście nie jest możliwe zapamiętanie wszystkich poleceń i komend, które R może dla nas wykonać. Z resztą nie ma to nawet sensu. Aby ułatwić sobie proces pisania programu z pomocą przychodzą środowiska programowania – IDE (ang. Integrated Development Environment). Jest to dodatkowy program (nakładka), który w znacznym stopniu ułatwia pisanie kodu oferując podpowiedzi lub nawet gotowe szablony poleceń, które możemy edytować i poźniej wysłać R do wykonania.\nAktualnie, najpopularniejszym środowiskiem programowania (IDE) w języku R - jest https://www.rstudio.com (niebawem przemianowane na Posit). W najprostszej wersji R-Studio jest dostępne nieodpłatnie. Dodatkowo, R-Studio ułatwi nam: zainstalowanie niezbędnych bibliotek, tworzenie projektów analizy danych, tworzenie raportów lub wirtualnych notatników, prezentacji i nawet stron www.\nW duchu otwartości przeprowadzania analizy danych oraz dostępu do danych, szczególnie w środowisku akademickim (ang. Research Reproducibility) [https://www.nature.com/articles/d42473-019-00004-y] warto jest wykorzystać narzędzia oferowane przez R-Studio jak wirtualne notatniki lub szablony raportów. W dużym stopniu jest to ułatwienie procesu dokumentacji pracy z danymi, przeprowadzonych analiz i otrzymanych rezultatów. W odpowiednio skomponowanym pliku tekstowym, możemy zapisać program w języku R, a ponadto nasze komentarze do analizy czy nawet same wyniki. Taki plik, można w prosty sposób zapisać jako strona www lub jako plik Word lub PDF, który może śmiało posłużyć jako finalny raport analizy.\nW tym celu gorąco polecam program Quarto [www.quarto.org], który w znacznym stopniu rozszerza funkcjonalność R-Studio w zakresie tworzenie szablonów do dokumentowania pracy z danymi. Niniejsza strona właśnie powstaje na bazie Quarto i jest w całości napisana w R-Studio.\nDo rozpoczęcia przygody z R potrzebujemy dwa składniki: - Program R - R-Studio jako środowisko programistyczne - Quarto (opcjonalnie, ale gorąco polecam).\n`This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.`R"
  },
  {
    "objectID": "intro.html#instalacja-programów",
    "href": "intro.html#instalacja-programów",
    "title": "1  Programowanie w języku R",
    "section": "1.1 Instalacja programów",
    "text": "1.1 Instalacja programów"
  },
  {
    "objectID": "intro.html#interfejs-r-studio",
    "href": "intro.html#interfejs-r-studio",
    "title": "1  Programowanie w języku R",
    "section": "1.2 Interfejs R-Studio",
    "text": "1.2 Interfejs R-Studio"
  },
  {
    "objectID": "intro.html#podstawy-języka-r",
    "href": "intro.html#podstawy-języka-r",
    "title": "1  Programowanie w języku R",
    "section": "1.3 Podstawy języka R",
    "text": "1.3 Podstawy języka R"
  },
  {
    "objectID": "intro.html#pierwszy-projekt-analizy-danych",
    "href": "intro.html#pierwszy-projekt-analizy-danych",
    "title": "1  Programowanie w języku R",
    "section": "1.4 Pierwszy projekt analizy danych",
    "text": "1.4 Pierwszy projekt analizy danych\n\n\n\n\nKnuth, Donald E. 1984. „Literate Programming”. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]