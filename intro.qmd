# Programowanie w języku R 


`R` to program statystyczny i jednocześnie język programowania wykorzystywany do
przetwarzania danych oraz przeprowadzania analiz statystycznych. `R` jest 
dostępny nieodpłatnie ze strony [projektu CRAN R](https://cran.r-project.org). Sam program 
to nie wszystko. Sukces `R` i jego rosnąca popularność, nie tylko w środowisku 
naukowym, nie byłaby możliwa dzięki rzeszy entuzjastów tworzących dodatkowe 
pakiety rozszerzające jego funkcjonalność.  W środowisku użytkowników `R` pakiety te nazywane są często
_bibliotekami_ (ang. _libraries_). Tutaj dowiesz się, które biblioteki są obecnie popularne 
w przeprowadzaniu analizy, które ułatwiają tworzenie tabel oraz raportów i mają
praktyczne zastosowanie w dziedzinie zdrowia publicznego lub epidemiologii. 
`R` nie posiada rozbudowanego graficznego interfejsu jaki możemy spotkać 
w pakietach _Statistica, SPSS, czy SAS Enterprise Guide_. Praca w `R` opiera się głównie 
na wpisywaniu sekwencji poleceń bezpośrednio w konsoli `R` lub zapisaniu ich w pliku tekstowym,
który następnie jest odczytywany i wykonywany. To jest często bariera, która może 
odstraszyć początkujących użytkowników i jest mniej przyjazna jak interfejs, gdzie przy
pomocy kliknięcia myszką można wykonać operacje na danych lub przeprowadzić analizę statystyczną. 
Nic bowiem bardziej mylnego. Plik tekstowy z sekwencją poleceń (program) wydawanych `R` podczas analizy
jest poniekąd rodzajem dziennika, gdzie możemy w łatwy sposób zapisać wszystkie kroki
naszej analizy. Prześledzić wszystkie etapy manipulacji danych i ewentualnie 
odnaleźć błędy. Ponadto, zachowany program można wykonać wielokrotnie w przypadku zmiany
danych źródłowych i uniknąć problemu powtarzania wszystkich sekwencji klikania i wybierania 
pozycji w menu interfejsu graficznego. Gdy dane źródłowe zmienią się, wystarczy wywołać program
jeszcze raz i odczytać nowe wyniki analizy. 

Oczywiście nie jest możliwe zapamiętanie wszystkich poleceń i komend, które `R` może dla nas
wykonać. Z resztą nie ma to nawet sensu. Aby ułatwić sobie proces pisania programu 
z pomocą przychodzą _środowiska programowania_ -- IDE (ang. _Integrated Development Environment_).
Jest to dodatkowy program (nakładka), który w znacznym stopniu ułatwia pisanie kodu oferując _podpowiedzi_ 
lub nawet gotowe szablony poleceń, które możemy edytować i poźniej wysłać `R` do wykonania. 


Aktualnie, najpopularniejszym środowiskiem programowania (IDE) w języku R - jest [R-Studio](https://www.rstudio.com)
 (niebawem przemianowane na _Posit_). W najprostszej wersji R-Studio jest dostępne nieodpłatnie. 
 Dodatkowo, R-Studio ułatwi nam: zainstalowanie niezbędnych bibliotek, tworzenie projektów analizy danych,
  tworzenie raportów lub wirtualnych notatników, prezentacji i nawet stron www. 
 
 W duchu otwartości przeprowadzania analizy danych oraz dostępu do danych, szczególnie 
 w środowisku akademickim (ang. [Research Reproducibility](https://www.nature.com/articles/d42473-019-00004-y)) warto jest wykorzystać narzędzia 
oferowane przez R-Studio jak wirtualne notatniki lub szablony raportów. 
W dużym stopniu jest to ułatwienie procesu dokumentacji pracy z danymi, przeprowadzonych analiz i 
otrzymanych rezultatów. W odpowiednio skomponowanym pliku tekstowym, możemy zapisać 
program w języku R, a ponadto nasze komentarze do analizy czy nawet same wyniki. 
Taki plik, można w prosty sposób zapisać jako strona www lub jako plik Word lub PDF, który może śmiało 
posłużyć jako finalny raport analizy. 

W tym celu gorąco polecam program [**Quarto**](www.quarto.org), który w znacznym stopniu rozszerza 
funkcjonalność R-Studio w zakresie tworzenie szablonów do dokumentowania pracy  z danymi. 
Niniejsza strona właśnie powstaje na bazie Quarto i jest w całości napisana w R-Studio.

 
 Do rozpoczęcia przygody z R potrzebujemy dwa składniki:
 - Program `R` 
 - R-Studio jako środowisko programistyczne
 - Quarto (opcjonalnie, ale gorąco polecam).
 


## Instalacja programów 

Pniżej wymienionione są adresy skąd można pobrać oprogramowanie:

- CRAN R
- R Studio
- Quarto

Instalację zaczynamy od pakietu R. W przypadku systemu operacyjnego Windows 
można urzyć instalatora, który przeprowadzi nas przez proces instalacji. Generalnie
możemy zminimalizować swój wysiłek do klikania _OK_ lub _DALEJ_. 

Gdy instalacja jest zakończona w menuu _Start_ Windows powinny znajdować się 
pozycje wskazane na ilustracji.
Ograniczamy się wyłącznie do uruchimienia R-Studio, który uruchomi jednocześnie nową 
sesję R i Quarto, gdy będzie to wymagane.  Nie ma potrzeby uruchamiania tych aplikacji osobno - to jest 
właśnie urok korzystania z oprogramowania IDE, jak R-Studio. POtrzebujemy 
tylko wybrane składniki, aby wszystko ze sobą współpracowało. 

TODO: Ilustracja Menu Start.

## Interfejs R-Studio

Gdy otworzymy R-Studio, mamy przed sobą okno, w którym znajdują się 4 obszary:

- Do edycji kodu (lewa górna część)::
    gdy tworzymy pierwszy plik z kodem właśnie tam dokonujemy edycji i piszemy program w języku R (ponadto R-  Studio wspiera między innymi język _Python_ czy _SQL_)
- Nawigator środowiska R  (prawa górna część)::
    w tym miejscu znajdziemy wszystkie aktualnie używane dane, wektory danych, tablice lub tabele danych. W przypadku utworzenia projektu z kontrolą wersji (GIT) pojawią się dodatkowe zakładki umożliwiające wykorzystanie funkcji oferowanych przez GIT.
- Konsola R / Terminal ::
W konsoli wykonywane są wszystkie polecenia. Tutaj użytkownik ma bezpośredni dostęp do programu R. Gdy zaznaczymy fragment kodu w oknie powyżej i wciśniemy kombinację klawiszy CTRL + Enter kod zostanie wysłany do konsoli i wykonany przez R. które są zawarte w pliku edytowanym u góry (obszar edycji kodu). Pondadto obecnie R uożliwia dostęp  do terminala systemu, gdzie można dokonywać operacji na plikach z poziomu systemu operacyjnego (wielbiciele DOS docenią tę funkcjonalność), oraz można śledzić proces _kompilacji_ raportów  lub innych plików wyjściowych z wynikami analizy, którą przeprowadzamy
3i możemy zobaczyć wyniki analizy lub komunikaty, które R wysyła do nas. 
- Części nawigacyjnej środowiska  - gdzie widzimy wszystkie obiekty w środowisku R - wektory danych, tabele danych, itp. Wszystkie te elementy są omówione w dalszych sekcjach książki.
- Części nawigacyjnej systemu plików, gdzie możemy zobaczyć wszystkie pliki lub katalogi projektu zapisane na dysku, ponadto możemy zobaczyć wykresu, które są wygenerowane podczas analizy, oraz mamy dostęp do dokumentacji pakietu R lub _bibliotek_, które aktualnie wykorzystujemy. W tym właśnie miejscu znajdziemy jakie są dostępne funkcje potrzebne do analizy danych oraz jakie parametry, musimy podać aby funkcje poprawnie wykonały porządane zadanie.

   


## Podstawy języka R

## Pierwszy projekt analizy danych


